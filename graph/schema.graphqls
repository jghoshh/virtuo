type Query {
  user(id: ID!): User
}

type User {
  id: ID!
  username: String!
  email: String!
  emailConfirmed: Boolean!
  points: Int!
  levelID: ID!
  groupIDs: [ID!]
  streak: Int!
}

type Mutation {
  signUp(user: UserInput!): AuthPayload!
  signIn(username: String!, password: String!): AuthPayload!
  signOut: Boolean!
  refreshAccessToken(refreshToken: String!): AuthPayload!
  updateUser(input: UpdateUserInput!): Boolean!
  deleteUser: Boolean!
  checkCredentials(input: UserInput!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  confirmEmail(confirmationToken: String!): Boolean! 
}

type AuthPayload {
  token: String!
  refreshToken: String!
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  currentPassword: String!
  newUsername: String
  newEmail: String
  newPassword: String
}

input ResetPasswordInput {
  email: String!
  newPassword: String!
}